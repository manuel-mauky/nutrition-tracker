/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router"

import { Route as rootRouteImport } from "./routes/__root"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as RecipesRecipeIdRouteImport } from "./routes/recipes.$recipeId"
import { Route as FoodsFoodIdRouteImport } from "./routes/foods.$foodId"

const SettingsLazyRouteImport = createFileRoute("/settings")()
const DiaryLazyRouteImport = createFileRoute("/diary")()
const RecipesIndexLazyRouteImport = createFileRoute("/recipes/")()
const FoodsIndexLazyRouteImport = createFileRoute("/foods/")()

const SettingsLazyRoute = SettingsLazyRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/settings.lazy").then((d) => d.Route))
const DiaryLazyRoute = DiaryLazyRouteImport.update({
  id: "/diary",
  path: "/diary",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/diary.lazy").then((d) => d.Route))
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesIndexLazyRoute = RecipesIndexLazyRouteImport.update({
  id: "/recipes/",
  path: "/recipes/",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/recipes.index.lazy").then((d) => d.Route))
const FoodsIndexLazyRoute = FoodsIndexLazyRouteImport.update({
  id: "/foods/",
  path: "/foods/",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/foods.index.lazy").then((d) => d.Route))
const RecipesRecipeIdRoute = RecipesRecipeIdRouteImport.update({
  id: "/recipes/$recipeId",
  path: "/recipes/$recipeId",
  getParentRoute: () => rootRouteImport,
} as any)
const FoodsFoodIdRoute = FoodsFoodIdRouteImport.update({
  id: "/foods/$foodId",
  path: "/foods/$foodId",
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/diary": typeof DiaryLazyRoute
  "/settings": typeof SettingsLazyRoute
  "/foods/$foodId": typeof FoodsFoodIdRoute
  "/recipes/$recipeId": typeof RecipesRecipeIdRoute
  "/foods": typeof FoodsIndexLazyRoute
  "/recipes": typeof RecipesIndexLazyRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/diary": typeof DiaryLazyRoute
  "/settings": typeof SettingsLazyRoute
  "/foods/$foodId": typeof FoodsFoodIdRoute
  "/recipes/$recipeId": typeof RecipesRecipeIdRoute
  "/foods": typeof FoodsIndexLazyRoute
  "/recipes": typeof RecipesIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/diary": typeof DiaryLazyRoute
  "/settings": typeof SettingsLazyRoute
  "/foods/$foodId": typeof FoodsFoodIdRoute
  "/recipes/$recipeId": typeof RecipesRecipeIdRoute
  "/foods/": typeof FoodsIndexLazyRoute
  "/recipes/": typeof RecipesIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/diary"
    | "/settings"
    | "/foods/$foodId"
    | "/recipes/$recipeId"
    | "/foods"
    | "/recipes"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/diary"
    | "/settings"
    | "/foods/$foodId"
    | "/recipes/$recipeId"
    | "/foods"
    | "/recipes"
  id:
    | "__root__"
    | "/"
    | "/diary"
    | "/settings"
    | "/foods/$foodId"
    | "/recipes/$recipeId"
    | "/foods/"
    | "/recipes/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DiaryLazyRoute: typeof DiaryLazyRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  FoodsFoodIdRoute: typeof FoodsFoodIdRoute
  RecipesRecipeIdRoute: typeof RecipesRecipeIdRoute
  FoodsIndexLazyRoute: typeof FoodsIndexLazyRoute
  RecipesIndexLazyRoute: typeof RecipesIndexLazyRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/settings": {
      id: "/settings"
      path: "/settings"
      fullPath: "/settings"
      preLoaderRoute: typeof SettingsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/diary": {
      id: "/diary"
      path: "/diary"
      fullPath: "/diary"
      preLoaderRoute: typeof DiaryLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/recipes/": {
      id: "/recipes/"
      path: "/recipes"
      fullPath: "/recipes"
      preLoaderRoute: typeof RecipesIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/foods/": {
      id: "/foods/"
      path: "/foods"
      fullPath: "/foods"
      preLoaderRoute: typeof FoodsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/recipes/$recipeId": {
      id: "/recipes/$recipeId"
      path: "/recipes/$recipeId"
      fullPath: "/recipes/$recipeId"
      preLoaderRoute: typeof RecipesRecipeIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/foods/$foodId": {
      id: "/foods/$foodId"
      path: "/foods/$foodId"
      fullPath: "/foods/$foodId"
      preLoaderRoute: typeof FoodsFoodIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DiaryLazyRoute: DiaryLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  FoodsFoodIdRoute: FoodsFoodIdRoute,
  RecipesRecipeIdRoute: RecipesRecipeIdRoute,
  FoodsIndexLazyRoute: FoodsIndexLazyRoute,
  RecipesIndexLazyRoute: RecipesIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
